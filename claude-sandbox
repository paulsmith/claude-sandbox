#!/usr/bin/env bash
# claude-sandbox  — run Claude Code inside a tighter macOS sandbox
#
# Copyright (c) 2025 Paul Smith <paulsmith@pobox.com>
# SPDX-License-Identifier: MIT
#
#   claude-sandbox            # generate profile + run claude (default)
#   claude-sandbox run …args  # same, pass args through
#   claude-sandbox generate   # build the profile only
#   claude-sandbox profile    # print last-generated profile path
#   claude-sandbox help       # this text
#
# Note: sandbox-exec(1) is deprecated but works on macOS 14 + 15 (June 2025).
#-------------------------------------------------------------------------------

set -euo pipefail

TMPDIR="${TMPDIR:-/tmp}"
PROFILE_NAME="claude-sandbox-$(basename "$(pwd -P)")-$(printf "%x" "$(pwd -P | cksum | cut -d' ' -f1)")"
PROFILE_FILE="$TMPDIR/$PROFILE_NAME.sb"

usage() { grep -E '^# ' "${BASH_SOURCE[0]}" | sed 's/^# \{0,1\}//'; }

detect_package_paths() {
  local paths=()
  
  # Homebrew detection (ARM vs Intel Mac)
  if [[ -d "/opt/homebrew" ]]; then
    paths+=("/opt/homebrew")
  elif [[ -d "/usr/local/Homebrew" ]]; then
    paths+=("/usr/local/Homebrew")
  fi
  
  # User binaries (npm global, pipx, cargo, etc.)
  if [[ -d "$HOME/.local" ]]; then
    paths+=("$HOME/.local")
  fi
  
  # Nix package manager
  if [[ -d "/nix/store" ]]; then
    paths+=("/nix/store")
  fi
  
  printf '%s\n' "${paths[@]}"
}

generate_profile() {
  local project_dir home_dir
  project_dir="$(pwd -P)"
  home_dir="$HOME"
  
  # Detect available package manager paths
  local detected_paths=()
  readarray -t detected_paths < <(detect_package_paths)

  cat >"$PROFILE_FILE" <<'EOF'
;; ------------------------------------------------------------------
;;  Claude Code macOS sandbox profile (autogenerated)
;; ------------------------------------------------------------------
(version 1)
(deny default)

;; ---------- introspection & sysctl --------------------------------
(allow file-read-metadata)
(allow sysctl-read)

;; ---------- basic dir traversal -----------------------------------
(allow file-read* (literal "/"))
(allow file-read* (literal "/private"))

;; ---------- system runtime (read-only) ----------------------------
(allow file-read* file-map-executable
  (subpath "/System")
  (subpath "/usr")
  (subpath "/bin")
  (subpath "/sbin")
  (subpath "/Library/Frameworks")
  (subpath "/private/etc")
  (subpath "/var/db/dyld")
__DETECTED_READ_PATHS__
)

;; ---------- global npm/pipx/cargo bins ----------------------------
__DETECTED_USER_PATHS__

;; ---------- executable paths --------------------------------------
(allow process-exec
  (subpath "/usr")
  (subpath "/System")
  (subpath "/bin")
  (subpath "/sbin")
  (subpath "__PROJECT_DIR__")
  (literal "/usr/bin/env")
__DETECTED_EXEC_PATHS__
)

;; ---------- project workspace (RW) --------------------------------
(allow file-read* file-write* file-map-executable
  (subpath "__PROJECT_DIR__")
)

;; ---------- temp dirs ---------------------------------------------
(allow file-read* file-write*
  (subpath "/tmp")
  (regex "^/private/var/folders/.*/T/")
)

;; ---------- Claude config & token files ---------------------------
(allow file-read* file-write*
  (subpath "__HOME__/.claude")            ;; dir
  (literal "__HOME__/.claude.json")       ;; single file
)

;; ---------- time-zone & prefs (RO) --------------------------------
(allow file-read*
  (subpath "/private/var/db/timezone")    ;; tzdata
  (subpath "/Library/Preferences")        ;; plists
)

;; ---------- /dev access (RO) + ioctl ------------------------------
(allow file-read* (literal "/dev"))                           ;;
(allow file-read* file-write*
  (regex "^/dev/(tty.*|null|zero|dtracehelper)")
)
(allow file-ioctl
  (literal "/dev/dtracehelper")                               ;;
  (regex "^/dev/tty.*")                                       ;;
)

;; ---------- mach-lookup services ---------------------------------
(allow mach-lookup                                              ;;
  (global-name "com.apple.system.opendirectoryd.libinfo")
  (global-name "com.apple.SystemConfiguration.DNSConfiguration")
  (global-name "com.apple.coreservices.launchservicesd")
  (global-name "com.apple.CoreServices.coreservicesd")
  (global-name "com.apple.system.notification_center")
  (global-name "com.apple.logd")
  (global-name "com.apple.diagnosticd")
  (global-name "com.apple.lsd.mapdb")
  (global-name "com.apple.lsd.modifydb")
  (global-name "com.apple.coreservices.quarantine-resolver")
)

;; ---------- Launch Services needed by /usr/bin/open --------------
(allow mach-lookup
  (regex "^com\\.apple\\.lsd(\\..*)?$")                   ;; lsd + its mapdb / modifydb helpers
)

;; ---------- Notification Center shared-memory (RO) ---------------
(allow ipc-posix-shm-read-data
  (ipc-posix-name "apple.shm.notification_center")
)

;; ---------- User-level preference reads (RO) ---------------------
(allow file-read*
  (subpath "__HOME__/Library/Preferences")
)

;; ---------- explicit sensitive DENY list --------------------------
(deny file-read* file-write*
  (subpath "__HOME__/Documents")
  (subpath "__HOME__/Desktop")
  (subpath "__HOME__/Downloads")
  (subpath "__HOME__/Pictures")
  (subpath "__HOME__/Movies")
  (subpath "__HOME__/Music")
  (regex "^__HOME__/\\.(ssh|aws|gnupg|kube|docker|config)($|/)")
)

;; ---------- networking --------------------------------------------
(allow network*)

(allow process-fork)
(allow lsopen)
EOF

  # First, replace basic placeholders
  sed -i '' \
    -e "s|__PROJECT_DIR__|$project_dir|g" \
    -e "s|__HOME__|$home_dir|g" \
    "$PROFILE_FILE"
  
  # Then replace detected path placeholders with actual paths
  for path in "${detected_paths[@]}"; do
    # Add to read paths section
    sed -i '' "/__DETECTED_READ_PATHS__/i\\
  (subpath \"$path\")
" "$PROFILE_FILE"
    
    # Add to exec paths section
    sed -i '' "/__DETECTED_EXEC_PATHS__/i\\
  (subpath \"$path\")
" "$PROFILE_FILE"
    
    # Add .local paths to user paths section  
    if [[ "$path" == *"/.local" ]]; then
      sed -i '' "/__DETECTED_USER_PATHS__/i\\
(allow file-read*\\
  (subpath \"$path\")\\
)
" "$PROFILE_FILE"
    fi
  done
  
  # Remove placeholder markers
  sed -i '' \
    -e "/__DETECTED_READ_PATHS__/d" \
    -e "/__DETECTED_USER_PATHS__/d" \
    -e "/__DETECTED_EXEC_PATHS__/d" \
    "$PROFILE_FILE"
  
  # Add comment if no user paths were added
  if ! grep -q "/.local" "$PROFILE_FILE"; then
    sed -i '' '/^;; ---------- global npm\/pipx\/cargo bins/a\
;; No user package paths detected
' "$PROFILE_FILE"
  fi
}

run_claude() {
  [ $# -gt 0 ] && shift # drop “run”
  generate_profile
  echo "→ Running Claude Code sandboxed in:  $PWD"
  echo "→ Profile: $PROFILE_FILE"
  exec sandbox-exec -f "$PROFILE_FILE" claude "$@"
}

cmd="${1:-run}"
case "$cmd" in
  run)         run_claude        "$@" ;;
  generate)    generate_profile  && echo "$PROFILE_FILE" ;;
  profile)     echo "$PROFILE_FILE" ;;
  help|-h|--help) usage ;;
  *)           echo "Unknown command: $cmd"; echo; usage; exit 1 ;;
esac
